{"version":3,"file":"zValidate-B6k4MB58.js","sources":["../src/zValidate.js"],"sourcesContent":["import {z, ZodType, ZodObject} from 'zod';\r\nimport {merge} from 'lodash';\r\n\r\nconst zValidate = function (Alpine) {\r\n\r\n    Alpine.magic('z', () => z);\r\n\r\n    Alpine.magic('zvalidation', (el) => {\r\n        const {zValidateSchema: zSchema} = Alpine.$data(el);\r\n        const formState = upsertFormState(el, {errors: {}, successes: []});\r\n\r\n        return {\r\n            isValid(field) {\r\n                return formState.successes.includes(field);\r\n            },\r\n            isInvalid(field) {\r\n                return Object.keys(formState.errors).includes(field);\r\n            },\r\n            getError(field) {\r\n                return formState.errors[field] ?? null;\r\n            },\r\n            getErrors() {\r\n                return formState.errors;\r\n            },\r\n            reset() {\r\n                formState.errors = {};\r\n                formState.successes = [];\r\n            },\r\n            validate() {\r\n                const result = zSchema.safeParse(getData(el, true));\r\n                this.reset();\r\n\r\n                if (result.success) {\r\n                    formState.successes = Object.keys(getData(el, true));\r\n                    return true;\r\n                }\r\n\r\n                formState.errors = parseErrors(result.error);\r\n                return false;\r\n            },\r\n            validateOnly(field) {\r\n                if (!zSchema.shape || !(field in zSchema.shape)) {\r\n                    console.warn(`No validation schema defined for the field: ${field}`);\r\n                    return false;\r\n                }\r\n\r\n                const fieldData = {[field]: getData(el, true)[field]};\r\n                const fieldSchema = zSchema.shape[field];\r\n\r\n                const result = fieldSchema.safeParse(fieldData[field]);\r\n\r\n                if (result.success) {\r\n                    delete formState.errors[field];\r\n                    if (!formState.successes.includes(field)) {\r\n                        formState.successes.push(field);\r\n                    }\r\n                    return true;\r\n                }\r\n\r\n                formState.successes = formState.successes.filter(v => v !== field);\r\n                formState.errors[field] = result.error.format()._errors[0] ?? '';\r\n                return false;\r\n            }\r\n        };\r\n\r\n    })\r\n\r\n    const getElId = (el) => Alpine.$data(el).$id();\r\n\r\n    const getFormState = (el) => window.zValidate[getElId(el)] ?? Alpine.reactive({errors: {}, successes: []});\r\n\r\n    const upsertFormState = (el, value) => {\r\n        window.zValidate = window.zValidate ?? {};\r\n        window.zValidate[getElId(el)] = merge(getFormState(el), value);\r\n        return window.zValidate[getElId(el)];\r\n    }\r\n\r\n    const getData = (el, parse = false) => {\r\n        const data = Alpine.$data(el);\r\n        return parse ? JSON.parse(JSON.stringify(data)) : data;\r\n    };\r\n\r\n    const checkCompatibility = (data) => {\r\n        if (typeof data !== 'object') {\r\n            throw new Error('ZValidate: x-data must be an object to use the zvalidate directive.');\r\n        }\r\n\r\n        if (!data.zValidateSchema) {\r\n            throw new Error('ZValidate: zValidateSchema property is required on x-data model.');\r\n        }\r\n\r\n        if (!(data.zValidateSchema instanceof ZodType) || !(data.zValidateSchema instanceof ZodObject)) {\r\n            throw new Error('ZValidate: zValidateSchema must be an instance of a Zod object.');\r\n        }\r\n    };\r\n\r\n    const parseErrors = (zodError) => {\r\n        return Object.entries(zodError.format()).reduce((errors, [field, value]) => {\r\n            if (field !== '_errors' && Array.isArray(value['_errors'])) {\r\n                errors[field] = value['_errors'][0];\r\n            }\r\n            return errors;\r\n        }, {});\r\n    };\r\n\r\n    Alpine.directive('zvalidate', (el, {expression}, {effect, cleanup}) => {\r\n        effect(() => {\r\n            const data = getData(el);\r\n            checkCompatibility(data);\r\n\r\n            if (expression) {\r\n                const handler = (event) => {\r\n                    const model = event.target.getAttribute('x-model');\r\n                    if (model) {\r\n                        Alpine.$data(el).$zvalidation.validateOnly(model);\r\n                    }\r\n                };\r\n\r\n                el.addEventListener(expression, handler);\r\n                cleanup(() => el.removeEventListener(expression, handler));\r\n            }\r\n        })\r\n    })\r\n}\r\n\r\nexport {zValidate}"],"names":["zValidate","Alpine","el","zSchema","formState","upsertFormState","field","result","getData","parseErrors","fieldData","v","getElId","getFormState","value","merge","parse","data","checkCompatibility","ZodType","ZodObject","zodError","errors","expression","effect","cleanup","handler","event","model"],"mappings":"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"}