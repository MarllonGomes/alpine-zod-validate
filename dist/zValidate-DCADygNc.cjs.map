{"version":3,"file":"zValidate-DCADygNc.cjs","sources":["../src/zValidate.js"],"sourcesContent":["import {z, ZodType, ZodObject} from 'zod';\r\nimport {merge} from 'lodash';\r\n\r\nconst zValidate = function (Alpine) {\r\n\r\n    Alpine.magic('z', () => z);\r\n\r\n    Alpine.magic('zvalidation', (el) => {\r\n        const {zValidateSchema: zSchema} = Alpine.$data(el);\r\n        const formState = upsertFormState(el, {errors: {}, successes: []});\r\n\r\n        return {\r\n            isValid(field) {\r\n                return formState.successes.includes(field);\r\n            },\r\n            isInvalid(field) {\r\n                return Object.keys(formState.errors).includes(field);\r\n            },\r\n            getError(field) {\r\n                return formState.errors[field] ?? null;\r\n            },\r\n            getErrors() {\r\n                return formState.errors;\r\n            },\r\n            reset() {\r\n                formState.errors = {};\r\n                formState.successes = [];\r\n            },\r\n            validate() {\r\n                const result = zSchema.safeParse(getData(el, true));\r\n                this.reset();\r\n\r\n                if (result.success) {\r\n                    formState.successes = Object.keys(getData(el, true));\r\n                    return true;\r\n                }\r\n\r\n                formState.errors = parseErrors(result.error);\r\n                return false;\r\n            },\r\n            validateOnly(field) {\r\n                if (!zSchema.shape || !(field in zSchema.shape)) {\r\n                    console.warn(`No validation schema defined for the field: ${field}`);\r\n                    return false;\r\n                }\r\n\r\n                const fieldData = {[field]: getData(el, true)[field]};\r\n                const fieldSchema = zSchema.shape[field];\r\n\r\n                const result = fieldSchema.safeParse(fieldData[field]);\r\n\r\n                if (result.success) {\r\n                    delete formState.errors[field];\r\n                    if (!formState.successes.includes(field)) {\r\n                        formState.successes.push(field);\r\n                    }\r\n                    return true;\r\n                }\r\n\r\n                formState.successes = formState.successes.filter(v => v !== field);\r\n                formState.errors[field] = result.error.format()._errors[0] ?? '';\r\n                return false;\r\n            }\r\n        };\r\n\r\n    })\r\n\r\n    const getElId = (el) => Alpine.$data(el).$id();\r\n\r\n    const getFormState = (el) => window.zValidate[getElId(el)] ?? Alpine.reactive({errors: {}, successes: []});\r\n\r\n    const upsertFormState = (el, value) => {\r\n        window.zValidate = window.zValidate ?? {};\r\n        window.zValidate[getElId(el)] = merge(getFormState(el), value);\r\n        return window.zValidate[getElId(el)];\r\n    }\r\n\r\n    const getData = (el, parse = false) => {\r\n        const data = Alpine.$data(el);\r\n        return parse ? JSON.parse(JSON.stringify(data)) : data;\r\n    };\r\n\r\n    const checkCompatibility = (data) => {\r\n        if (typeof data !== 'object') {\r\n            throw new Error('ZValidate: x-data must be an object to use the zvalidate directive.');\r\n        }\r\n\r\n        if (!data.zValidateSchema) {\r\n            throw new Error('ZValidate: zValidateSchema property is required on x-data model.');\r\n        }\r\n\r\n        if (!(data.zValidateSchema instanceof ZodType) || !(data.zValidateSchema instanceof ZodObject)) {\r\n            throw new Error('ZValidate: zValidateSchema must be an instance of a Zod object.');\r\n        }\r\n    };\r\n\r\n    const parseErrors = (zodError) => {\r\n        return Object.entries(zodError.format()).reduce((errors, [field, value]) => {\r\n            if (field !== '_errors' && Array.isArray(value['_errors'])) {\r\n                errors[field] = value['_errors'][0];\r\n            }\r\n            return errors;\r\n        }, {});\r\n    };\r\n\r\n    Alpine.directive('zvalidate', (el, {expression}, {effect, cleanup}) => {\r\n        effect(() => {\r\n            const data = getData(el);\r\n            checkCompatibility(data);\r\n\r\n            if (expression) {\r\n                const handler = (event) => {\r\n                    const model = event.target.getAttribute('x-model');\r\n                    if (model) {\r\n                        Alpine.$data(el).$zvalidation.validateOnly(model);\r\n                    }\r\n                };\r\n\r\n                el.addEventListener(expression, handler);\r\n                cleanup(() => el.removeEventListener(expression, handler));\r\n            }\r\n        })\r\n    })\r\n}\r\n\r\nexport {zValidate}"],"names":["zValidate","Alpine","z","el","zSchema","formState","upsertFormState","field","result","getData","parseErrors","fieldData","v","getElId","getFormState","value","merge","parse","data","checkCompatibility","ZodType","ZodObject","zodError","errors","expression","effect","cleanup","handler","event","model"],"mappings":"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"}